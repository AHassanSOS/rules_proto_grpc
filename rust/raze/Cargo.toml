[package]
name = "compile_with_bazel"
version = "0.0.0"

# Mandatory (or Cargo tooling is unhappy)
[lib]
path = "lib.rs"

[dependencies]
futures = "=0.3.12"
grpcio = { version = "=0.7.1", features = [] }
grpcio-compiler = "=0.7.0"
protobuf = { version = "=2.20.0", features = ["with-bytes"] }
protobuf-codegen = "=2.20.0"

log = "=0.4.6" # For routeguide example
serde_json = "*" # For routeguide example

[package.metadata.raze]
genmode = "Remote"
workspace_path = "//rust/raze"
output_buildfile_suffix = "BUILD.bazel"
package_aliases_dir = "."
default_gen_buildrs = true
rust_rules_workspace_name = "rules_rust"


# Plugins
[package.metadata.raze.crates.protobuf-codegen.'*']
extra_aliased_targets = ["cargo_bin_protoc_gen_rust"]

[package.metadata.raze.crates.grpcio-compiler.'*']
extra_aliased_targets = ["cargo_bin_grpc_rust_plugin"]


# Crate fixes
[package.metadata.raze.crates.grpcio-sys.'*']
gen_buildrs = false  # CMake build used by grpc-sys does not work nicely with Bazel and sandbox
additional_deps = [":grpc_bindings"]  # Use manual gRPC binding compilation
skipped_deps = ["libz-sys-1.1.2"]  # This now comes from manual gRPC binding compilation
additional_build_file = "../../third_party/BUILD.bazel.raze_grpc_sys"  # Add binding definition

# We need to pass BINDING_PATH env var to grpcio_sys rust_library to emulate the behaviour of
# running build.rs
additional_env = { BINDING_PATH = "../bindings/x86_64-unknown-linux-gnu-bindings.rs" }
