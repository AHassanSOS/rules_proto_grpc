"""
cargo-raze crate build file.

DO NOT EDIT! Replaced on runs of cargo-raze
"""
package(default_visibility = [
  # Public for visibility by "@raze__crate__version//" targets.
  #
  # Prefer access through "//rust/raze", which limits external
  # visibility to explicit Cargo.toml dependencies.
  "//visibility:public",
])

licenses([
  "notice", # "Apache-2.0"
])

load(
    "@io_bazel_rules_rust//rust:rust.bzl",
    "rust_library",
    "rust_binary",
    "rust_test",
)

rust_binary(
    name = "grpcio_sys_build_script",
    srcs = glob(["**/*.rs"]),
    crate_root = "build.rs",
    edition = "2015",
    deps = [
        "@raze__cc__1_0_37//:cc",
        "@raze__cmake__0_1_40//:cmake",
        "@raze__pkg_config__0_3_14//:pkg_config",
    ],
    rustc_flags = [
        "--cap-lints=allow",
    ],
    crate_features = [
      "default",
      "secure",
    ],
    data = glob(["*"]),
    version = "0.4.4",
    visibility = ["//visibility:private"],
)

genrule(
    name = "grpcio_sys_build_script_executor",
    srcs = glob(["*", "**/*.rs"]),
    outs = ["grpcio_sys_out_dir_outputs.tar.gz"],
    tools = [
      ":grpcio_sys_build_script",
    ],
    tags = ["no-sandbox"],
    cmd = "mkdir -p $$(dirname $@)/grpcio_sys_out_dir_outputs/;"
        + " (export CARGO_MANIFEST_DIR=\"$$PWD/$$(dirname $(location :Cargo.toml))\";"
        # TODO(acmcarther): This needs to be revisited as part of the cross compilation story.
        #                   See also: https://github.com/google/cargo-raze/pull/54
        + " export TARGET='x86_64-unknown-linux-gnu';"
        + " export RUST_BACKTRACE=1;"
        + " export CARGO_FEATURE_DEFAULT=1;"
        + " export CARGO_FEATURE_SECURE=1;"
        + " export OUT_DIR=$$PWD/$$(dirname $@)/grpcio_sys_out_dir_outputs;"
        + " export BINARY_PATH=\"$$PWD/$(location :grpcio_sys_build_script)\";"
        + " export OUT_TAR=$$PWD/$@;"
        + " export DEBUG=false;"
        + " export HOST=$$TARGET;"
        + " export OPT_LEVEL=3;"
        + " export PROFILE=release;"
        + " export GOCACHE=/tmp/grpcio-sys-gocache;"
        + " cd $$(dirname $(location :Cargo.toml)) && $$BINARY_PATH && tar -czf $$OUT_TAR -C $$OUT_DIR .)"
)


rust_library(
    name = "grpcio_sys",
    crate_root = "src/lib.rs",
    crate_type = "lib",
    edition = "2015",
    srcs = glob(["**/*.rs"]),
    deps = [
        "@raze__libc__0_2_58//:libc",
    ],
    rustc_flags = [
        "--cap-lints=allow",
        "-Lbazel-out/k8-fastbuild/bin/external/raze__grpcio_sys__0_4_4/grpcio_sys.out_dir",
        "-Lbazel-out/darwin-fastbuild/bin/external/raze__grpcio_sys__0_4_4/grpcio_sys.out_dir",
        "-lstatic=grpc_wrap",
        "-Lbazel-out/k8-fastbuild/bin/external/raze__grpcio_sys__0_4_4/grpcio_sys.out_dir/build",
        "-Lbazel-out/darwin-fastbuild/bin/external/raze__grpcio_sys__0_4_4/grpcio_sys.out_dir/build",
        "-lstatic=address_sorting",
        "-lstatic=grpc",
        "-lstatic=gpr",
        "-Lbazel-out/k8-fastbuild/bin/external/raze__grpcio_sys__0_4_4/grpcio_sys.out_dir/build/third_party/zlib",
        "-Lbazel-out/darwin-fastbuild/bin/external/raze__grpcio_sys__0_4_4/grpcio_sys.out_dir/build/third_party/zlib",
        "-lstatic=z",
        "-Lbazel-out/k8-fastbuild/bin/external/raze__grpcio_sys__0_4_4/grpcio_sys.out_dir/build/third_party/cares/cares/lib",
        "-Lbazel-out/darwin-fastbuild/bin/external/raze__grpcio_sys__0_4_4/grpcio_sys.out_dir/build/third_party/cares/cares/lib",
        "-lstatic=cares",
    ],
    out_dir_tar = ":grpcio_sys_build_script_executor",
    version = "0.4.4",
    crate_features = [
        "default",
        "secure",
    ],
)

