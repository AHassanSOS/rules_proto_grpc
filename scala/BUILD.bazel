load("//:plugin.bzl", "proto_plugin")

proto_plugin(
    name = "scala",
    # Use the proto basename and pipe the value to the scala_keyword function.
    # Ths function will append '_pb' if the basename is a scala keyword.
    out = "{name}.jar",
    tool = ":compiler_plugin",
    visibility = ["//visibility:public"],
)

proto_plugin(
    name = "grpc_scala",
    # Use the proto basename and pipe the value to the scala_keyword function.
    # Ths function will append '_pb' if the basename is a scala keyword.
    out = "{name}.jar",
    options = [
        "grpc",
        # "java_conversions", # causes weird import problems
    ],
    tool = ":compiler_plugin",
    visibility = ["//visibility:public"],
)

load("@io_bazel_rules_scala//scala:scala.bzl", "scala_binary", "scala_library", "scala_test")

scala_binary(
    name = "compiler_plugin",
    srcs = ["CompilerPlugin.scala"],
    main_class = "CompilerPlugin",
    visibility = ["//visibility:public"],
    runtime_deps = [
        "@com_github_scalapb_scalapb//:scala-library",
    ],
    deps = [
        "@com_github_scalapb_scalapb//:compilerplugin",
        "@com_google_protobuf//:protobuf_java",
    ],
)
