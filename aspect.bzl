load("//:plugin.bzl", "ProtoPluginInfo")
load(
    "//:common.bzl",
    "ProtoCompileInfo",
    "get_int_attr",
    "get_output_filename",
    "get_plugin_options",
    "descriptor_proto_path",
)


ProtoLibraryAspectNodeInfo = provider(
    fields = {
        "outputs": "The files generated by this aspect and its transitive dependencies",
        "output_roots": "The roots of the generated files",
    },
)


def proto_compile_impl(ctx):
    # Aggregate output files created by the aspect as it has walked the deps
    output_files = [file for dep in ctx.attr.deps for file in dep[ProtoLibraryAspectNodeInfo].outputs]

    # Create default and proto compile providers
    return [
        ProtoCompileInfo(
            label = ctx.label,
            outputs = output_files,
            files = output_files,
        ),
        DefaultInfo(files = depset(output_files))
    ]


proto_compile_attrs = {
    "verbose": attr.int(
        doc = "The verbosity level. Supported values and results are 1: *show command*, 2: *show command and sandbox after running protoc*, 3: *show command and sandbox before and after running protoc*, 4. *show env, command, expected outputs and sandbox before and after running protoc*",
    ),
    "verbose_string": attr.string(
        doc = "String version of the verbose string, used for aspect",
        default = "0",
    ),
}


proto_compile_aspect_attrs = {
    "verbose_string": attr.string(
        doc = "String version of the verbose string, used for aspect",
        values = ["", "None", "0", "1", "2", "3", "4"],
        default = "0",
    ),
}


def proto_compile_aspect_impl(target, ctx):
    ###
    ### Part 1: setup variables used in scope
    ###

    # <int> verbose level
    # verbose = ctx.attr.verbose
    verbose = get_int_attr(ctx.attr, "verbose_string")

    # <struct> The resolved protoc toolchain
    protoc_toolchain_info = ctx.toolchains["@build_stack_rules_proto//protobuf:toolchain_type"]

    # <Target> The resolved protoc compiler from the protoc toolchain
    protoc = protoc_toolchain_info.protoc_executable

    # <ProtoInfo> The ProtoInfo of the current node
    proto_info = target[ProtoInfo]

    # <string> The directory where the outputs will be generated, relative to
    # the package. This contains the aspect _prefix attr to disambiguate
    # different aspects that may share the same plugins and would otherwise try
    # to touch the same file. The same is true for the verbose_string attr.
    rel_outdir = '{}/{}_verb{}'.format(ctx.label.name, ctx.attr._prefix, verbose)

    # <string> The full path to the directory where the outputs will be generated
    full_outdir = "{}/{}/{}/{}".format(ctx.bin_dir.path, ctx.label.workspace_root, ctx.label.package, rel_outdir)

    # <list<PluginInfo>> A list of PluginInfo providers for the requested
    # plugins
    plugins = [plugin[ProtoPluginInfo] for plugin in ctx.attr._plugins]

    # <list<File>> The list of generated artifacts like 'foo_pb2.py' that we
    # expect to be produced.
    outputs = []


    ###
    ### Part 2: iterate over plugins
    ###

    # Each plugin is isolated to its own execution of protoc, as plugins may
    # have differing transitivity exclusions that cannot be expressed in a
    # single protoc execution for all plugins

    for plugin in plugins:

        ###
        ### Part 2.1: fetch plugin tool and runfiles
        ###

        # <list<File>> Files required for running the plugins
        plugin_runfiles = []

        # Add plugin executable if not a built-in plugin
        plugin_tool = None
        if plugin.tool_executable:
            plugin_tool = plugin.tool_executable

        # Add plugin runfiles if plugin has a tool
        if plugin.tool:
            plugin_runfiles = ctx.resolve_tools(tools = [plugin.tool])[0].to_list()

        # Add extra plugin data files
        plugin_runfiles += plugin.data


        ###
        ### Part 2.2: gather proto files and filter by transitivity
        ###

        # <list<File>> The filtered set of .proto files to compile
        protos = []

        for proto in proto_info.direct_sources:
            # Check transitivity for exclusion
            if any([
                proto.dirname.endswith(trans_pattern) or proto.path.endswith(trans_pattern)
                for trans_pattern, trans_type in plugin.transitivity.items() if trans_type == 'exclude'
            ]):
                continue

            # Proto not excluded
            protos.append(proto)

        # Skip plugin if all proto files have been excluded by transitivity
        if len(protos) == 0:
            if verbose > 2:
                print('Skipping plugin "{}" for "{}" as all proto files have been excluded'.format(plugin.name, ctx.label))
            continue


        ###
        ### Part 2.3: declare per-proto generated outputs from plugin
        ###

        # <list<File>> The list of generated artifacts like 'foo_pb2.py' that we
        # expect to be produced by this plugin only
        plugin_outputs = []

        for proto in protos:
            for pattern in plugin.outputs:
                plugin_outputs.append(ctx.actions.declare_file('{}/{}'.format(
                    rel_outdir,
                    get_output_filename(proto, pattern, proto_info)
                )))

        # Append current plugin outputs to global outputs before looking at
        # per-plugin outputs; these are manually added globally as there may
        # be srcjar outputs.
        outputs.extend(plugin_outputs)


        ###
        ### Part 2.4: declare per-plugin artifacts
        ###

        # Some protoc plugins generate a set of output files (like python) while
        # others generate a single 'archive' file that contains the individual
        # outputs (like java). Jar outputs are gathered as a special case as we need to
        # post-process them to have a 'srcjar' extension (java_library rules don't
        # accept source jars with a 'jar' extension)

        out_file = None
        if plugin.out:
            # Define out file
            out_file = ctx.actions.declare_file('{}/{}'.format(
                rel_outdir,
                plugin.out.replace("{name}", ctx.label.name)
            ))
            plugin_outputs.append(out_file)

            if not out_file.path.endswith(".jar"):
                # Add output direct to global outputs
                outputs.append(out_file)
            else:
                # Create .srcjar from .jar for global outputs
                srcjar = ctx.actions.declare_file(
                    "{}.srcjar".format(out_file.basename.rpartition('.')[0]),
                    sibling=out_file
                )
                ctx.actions.run_shell(
                    mnemonic = "CopySrcjar",
                    command = "cp '{}' '{}'".format(out_file.path, srcjar.path),
                    inputs = [out_file],
                    outputs = [srcjar],
                )
                outputs.append(srcjar)

        ###
        ### Part 2.5: build command
        ###

        # <Args> argument list for protoc execution
        args = ctx.actions.args()

        # Add proto paths
        #for proto_path in proto_info.transitive_proto_path.to_list():
        #    args.add("--proto_path={}".format(proto_path))

        # Add descriptors
        pathsep = ctx.configuration.host_path_separator
        args.add("--descriptor_set_in={}".format(pathsep.join(
            [f.path for f in proto_info.transitive_descriptor_sets.to_list()],
        )))

        # Add plugin if not built-in
        if plugin_tool:
            args.add("--plugin=protoc-gen-{}={}".format(plugin.name, plugin_tool.path))

        # Add plugin out arg
        out_arg = out_file.path if out_file else full_outdir
        if plugin.options:
            out_arg = "{}:{}".format(",".join(get_plugin_options(ctx.label.name, plugin.options)), out_arg)
        args.add("--{}_out={}".format(plugin.name, out_arg))

        # Add source proto files as descriptor paths
        for proto in protos:
            args.add(descriptor_proto_path(proto, proto_info))


        ###
        ### Part 2.6: run command
        ###

        mnemonic = "ProtoCompile"
        command = ("mkdir -p '{}' && ".format(full_outdir)) + protoc.path + " $@" # $@ is replaced with args list
        inputs = proto_info.transitive_descriptor_sets.to_list() + plugin_runfiles # Proto files are not inputs, as they come via the descriptor sets
        tools = [protoc] + ([plugin_tool] if plugin_tool else [])

        # Amend command with debug options
        if verbose > 0:
            print("{}:".format(mnemonic), protoc.path, args)

        if verbose > 1:
            command += " && echo '\n##### SANDBOX AFTER RUNNING PROTOC' && find . -type f "

        if verbose > 2:
            command = "echo '\n##### SANDBOX BEFORE RUNNING PROTOC' && find . -type l && " + command

        if verbose > 3:
            command = "env && " + command
            for f in inputs:
                print("INPUT:", f.path)
            for f in protos:
                print("TARGET PROTO:", f.path)
            for f in tools:
                print("TOOL:", f.path)
            for f in outputs:
                print("EXPECTED OUTPUT:", f.path)

        # Run protoc
        ctx.actions.run_shell(
            mnemonic = mnemonic,
            command = command,
            arguments = [args],
            inputs = inputs,
            tools = tools,
            outputs = plugin_outputs,
            progress_message = "Compiling protoc outputs for {} plugin".format(plugin.name),
        )


    ###
    ### Step 3: generate providers
    ###

    # Gather transitive info
    transitive_infos = [dep[ProtoLibraryAspectNodeInfo] for dep in ctx.rule.attr.deps]
    output_roots = [full_outdir]
    for transitive_info in transitive_infos:
        outputs += transitive_info.outputs
        output_roots.extend(transitive_info.output_roots)

    return [
        ProtoLibraryAspectNodeInfo(
            outputs = outputs,
            output_roots = output_roots,
        )
    ]
